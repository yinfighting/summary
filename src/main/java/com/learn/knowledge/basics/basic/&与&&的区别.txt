    &和&&都可以用作逻辑与的运算符，表示逻辑与（and），当运算符两边的表达式的结果都为true 时，
    整个运算结果才为true，否则，只要有一方为false，则结果为false。
    &&还具有短路的功能，即如果第一个表达式为false，则不再计算第二个表达式，例如，对于if(str != null
    && !str.equals(“”))表达式，当str 为null 时，后面的表达式不会执行，所以不会出现NullPointerException
    如果将&&改为&，则会抛出NullPointerException 异常。If(x==33 & ++y>0) y 会增长，If(x==33 && ++y>0)
    不会增长
    &还可以用作位运算符，当&操作符两边的表达式不是boolean 类型时，&表示按位与操作，我们通常
    使用0x0f 来与一个整数进行&运算，来获取该整数的最低4 个bit 位，例如，0x31 & 0x0f 的结果为0x01。


    String str = null;
    if (str != null && !str.equals("")) {
        System.out.println("str=" + str);
    } else {
        System.out.println("str为空"+(31&0xF));
    }